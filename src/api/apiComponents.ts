/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext.ts";
import type * as Fetcher from "./apiFetcher.ts";
import { apiFetch } from "./apiFetcher.ts";
import type * as Schemas from "./apiSchemas.ts";

export type GetCharactersError = Fetcher.ErrorWrapper<undefined>;

export type GetCharactersVariables = ApiContext["fetcherOptions"];

export const fetchGetCharacters = (
  variables: GetCharactersVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.CharacterListResponse,
    GetCharactersError,
    undefined,
    {},
    {},
    {}
  >({ url: "/character", method: "get", ...variables, signal });

export const useGetCharacters = <TData = Schemas.CharacterListResponse>(
  variables: GetCharactersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CharacterListResponse,
      GetCharactersError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.CharacterListResponse,
    GetCharactersError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/character",
      operationId: "getCharacters",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetCharacters({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation = {
  path: "/character";
  operationId: "getCharacters";
  variables: GetCharactersVariables;
};
